@page "/TrainingPlan/{TrainingPlanId}/Activity/{TrainingPlanActivityId}"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using PaceMe.BlazorApp.Services
@using PaceMe.BlazorApp.Model
@using System
@using Microsoft.AspNetCore.Components.Authorization
@using PaceMe.BlazorApp.Utilities
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ITrainingPlanService _trainingPlanService
@inject ITrainingPlanActivityService _trainingPlanActivityService
@inject ITrainingPlanActivitySegmentService _trainingPlanActivitySegmentService
@inject NavigationManager NavigationManager


<Loading IsLoading="_loading">
    <h1>Activity: @trainingPlanActivity.Name</h1>
    <NavLink class="button button-outline" href='@($"/trainingplan/{_trainingPlanId}")'>Back To Training Plan</NavLink>
    <button class='button' @onclick="() => ActivityEditForm.Open(trainingPlanActivity.Clone())">Toggle Activity Editor</button>
    <button class="button button-outline" @onclick="@(e => DeleteTrainingPlanActivity(trainingPlanActivity))">Delete</button>
    <PaceMe.BlazorApp.Shared.Forms.ActivityEditForm @ref="ActivityEditForm" OnEdit="HandleEditValidSubmit"></PaceMe.BlazorApp.Shared.Forms.ActivityEditForm>

    <hr/>
    <h2>Total time: @TimeFormatter.SecondsToTime(totalDuration)</h2>
    <div class="segment-list">
        @foreach(var segment in _segments.OrderBy(x => x.Order)){
        <div class="segment">
            <div class="segment-controls">
                <button class="button-outline segment-control-button" @onclick="@(e => DeleteSegment(segment))">Delete</button>
                <button class="button-outline segment-control-button" @onclick="@(e => DuplicateSegment(segment))">Duplicate</button>
            </div>
            <div class="segment-notes">@segment.Name @if(segment.Repetitions > 1) { <span> x @segment.Repetitions</span> }</div>
            @if(segment.Intervals.Count > 1){
                <div class="segment-interval-notes">@string.Join(" | ", segment.Intervals.OrderBy(i => i.Order).Select(i => {return $"{TimeFormatter.SecondsToTime(i.DurationSeconds)}, {i.Note}";}))</div>
            }
            else if(segment.Intervals.Count == 1){
                <div class="segment-interval-notes">@segment.Intervals.First().Note</div>
            }
            <div class="segment-time">@TimeFormatter.SecondsToTime(segment.Repetitions * segment.Intervals.Sum(x => x.DurationSeconds))</div>
        </div>
        }
        <button class='segment create-segment' @onclick="() => SegmentCreateForm.Open()">Create New Segment</button>
        <PaceMe.BlazorApp.Shared.Forms.SegmentEditForm @ref="SegmentCreateForm" OnEdit="HandleCreateValidSubmit"></PaceMe.BlazorApp.Shared.Forms.SegmentEditForm>
    </div>
</Loading>
@code {

    [Parameter]
    public string TrainingPlanId { get; set; }
    [Parameter]
    public string TrainingPlanActivityId { get; set; }

    private Guid _trainingPlanId { get; set; }
    private Guid _trainingPlanActivityId { get; set; }

    private bool _displayEditor {get; set;} = false;

    private bool _loading { get; set; } = true;

    private PaceMe.BlazorApp.Shared.Forms.ActivityEditForm ActivityEditForm { get; set; }
    private PaceMe.BlazorApp.Shared.Forms.SegmentEditForm SegmentCreateForm { get; set; }

    private int totalDuration { get {
            if(_segments.Any())
            {
                return _segments.Select(segment => segment.Repetitions * segment.Intervals.Sum(x => x.DurationSeconds)).Sum();
            }
            return 0;
        }
    }

    private TrainingPlan trainingPlan = new TrainingPlan();    
    private TrainingPlanActivity trainingPlanActivity = new TrainingPlanActivity();
    private IEnumerable<ActivitySegment> _segments = new List<ActivitySegment>();

    private string DisplayTime(int seconds){
        return $"{(seconds / 60)}:{(seconds % 60):00}";
    }

    protected override async Task OnInitializedAsync()
    {
        _trainingPlanId = Guid.Parse(TrainingPlanId);
        _trainingPlanActivityId = Guid.Parse(TrainingPlanActivityId);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        trainingPlan = await _trainingPlanService.GetTrainingPlan(user.GetMsalUserId(), _trainingPlanId);
        trainingPlanActivity = await _trainingPlanActivityService.GetTrainingPlanActivity(user.GetMsalUserId(), _trainingPlanId, _trainingPlanActivityId);
        _segments = await _trainingPlanActivitySegmentService.GetTrainingPlanActivitySegments(user.GetMsalUserId(), _trainingPlanId, _trainingPlanActivityId);
        _loading = false;
    }
    

    private async Task HandleEditValidSubmit(TrainingPlanActivity activity)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        await _trainingPlanActivityService.UpdateTrainingPlanActivity(user.GetMsalUserId(), _trainingPlanId, activity);
        
        trainingPlanActivity = activity;
    }

    private async Task HandleCreateValidSubmit(ActivitySegment segmentCreate)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if(_segments.Count() > 0){
            segmentCreate.Order = _segments.Select(x => x.Order).Max() + 1;
        }
        else {
            segmentCreate.Order = 1;
        }
        segmentCreate.ActivityId = trainingPlanActivity.TrainingPlanActivityId;

        await _trainingPlanActivitySegmentService.CreateTrainingPlanActivitySegment(user.GetMsalUserId(), _trainingPlanId, _trainingPlanActivityId, segmentCreate);
        _segments = await _trainingPlanActivitySegmentService.GetTrainingPlanActivitySegments(user.GetMsalUserId(), _trainingPlanId, _trainingPlanActivityId);
    }

    private async Task DuplicateSegment(ActivitySegment segment)
    {
        var newSegment = new ActivitySegment 
        {
            ActivityId = segment.ActivityId,
            Order = _segments.Select(x => x.Order).Max() + 1,
            Name = segment.Name,
            Repetitions = segment.Repetitions,
            Intervals = segment.Intervals.Select(i => i.NewCopy()).ToList()
        };
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        await _trainingPlanActivitySegmentService.CreateTrainingPlanActivitySegment(user.GetMsalUserId(), _trainingPlanId, _trainingPlanActivityId, newSegment);
        _segments = await _trainingPlanActivitySegmentService.GetTrainingPlanActivitySegments(user.GetMsalUserId(), _trainingPlanId, _trainingPlanActivityId);
    }

    private async Task DeleteSegment(ActivitySegment segment)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _segments = _segments.Where(x => x.ActivitySegmentId != segment.ActivitySegmentId);
        var highersegments = _segments.Where(x => x.Order > segment.Order).ToList();
        var tasks = highersegments.Select(x => 
            {
                x.Order = x.Order - 1; 
                return _trainingPlanActivitySegmentService.UpdateTrainingPlanActivitySegment(user.GetMsalUserId(), _trainingPlanId, _trainingPlanActivityId, x);
            });
        tasks = tasks.Append(_trainingPlanActivitySegmentService.DeleteTrainingPlanActivitySegment(user.GetMsalUserId(), _trainingPlanId, _trainingPlanActivityId, segment.ActivitySegmentId));
        await Task.WhenAll(tasks);
        _segments = await _trainingPlanActivitySegmentService.GetTrainingPlanActivitySegments(user.GetMsalUserId(), _trainingPlanId, _trainingPlanActivityId);
    }

    private async Task DeleteTrainingPlanActivity(TrainingPlanActivity activity){

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        await _trainingPlanActivityService.DeleteTrainingPlanActivity(user.GetMsalUserId(), activity.TrainingPlanId, activity.TrainingPlanActivityId);
        NavigationManager.NavigateTo("/trainingplan/" + _trainingPlanId.ToString(), false);
    }
}
