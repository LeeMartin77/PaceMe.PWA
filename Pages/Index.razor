@page "/"
@using Microsoft.AspNetCore.Authorization
@using PaceMe.BlazorApp.Services
@using PaceMe.BlazorApp.Model
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using PaceMe.BlazorApp.Utilities
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ITrainingPlanService _trainingPlanService
@inject ITrainingPlanActivityService _trainingPlanActivityService
@inject ITrainingPlanActivitySegmentService _segmentService

<AuthorizeView>
    <Authorized>
        @if(_nextActivity != null)
        {
            <div>
                <h2>@_nextActivity.Name</h2>
                <p>@_nextActivity.DateTime.Date.ToString("yyyy-MM-dd") | @QuickTimeTilNextActivity()</p>
                <p>@SecondsToTime(_nextActivitySegments.Sum(x => x.DurationSeconds)) Minutes</p>
                @if(_nextActivity.DateTime.Date == DateTime.Now.Date){
                    <button class="button" @onclick="@(e => CompleteNextActivity())">Complete</button>
                }
                <NavLink class="button button-outline" href='@($"/trainingplan/{_nextActivity.TrainingPlanId}/activity/{_nextActivity.TrainingPlanActivityId}")'>Detail</NavLink>
            </div>
        }
        else
        {
            <span>No activities scheduled</span>
        }
    </Authorized>
    <NotAuthorized>
        <span>Login to view activities</span>
    </NotAuthorized>
</AuthorizeView>
    
@code {
    private TrainingPlanActivity _nextActivity = null;
    private IEnumerable<TrainingPlanActivitySegment> _nextActivitySegments = new List<TrainingPlanActivitySegment>();
    private ClaimsPrincipal _user;

    private string SecondsToTime(int seconds)
    {
        return $"{(seconds / 60)}:{(seconds % 60):00}";
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        
        if(authState.User.Identity.IsAuthenticated)
        {
            _user = authState.User;
            await GetNextActivity();
        }
    }

    private async Task GetNextActivity()
    {
        string userId = _user.GetMsalUserId();
        var trainingplans = await _trainingPlanService.GetTrainingPlans(userId);
        var activities = new List<TrainingPlanActivity>();
        foreach(var plan in trainingplans.Where(x => x.Active))
        {
            activities.AddRange(await _trainingPlanActivityService.GetTrainingPlanActivities(userId, plan.TrainingPlanId));
        }
        _nextActivity = activities
            .Where(x => !x.Completed && x.DateTime.Date >= DateTime.Now.Date)
            .OrderBy(x => x.DateTime)
            .FirstOrDefault();
        if(_nextActivity != null){
            _nextActivitySegments = await _segmentService.GetTrainingPlanActivitySegments(userId, _nextActivity.TrainingPlanId, _nextActivity.TrainingPlanActivityId);
        }
    }

    private async Task CompleteNextActivity()
    {
        _nextActivity.Completed = true;
        await _trainingPlanActivityService.UpdateTrainingPlanActivity(_user.GetMsalUserId(), _nextActivity.TrainingPlanId, _nextActivity);
        await GetNextActivity();
    }

    private string QuickTimeTilNextActivity(){
        if(_nextActivity == null){
            return null;
        }
        double daysTilNext = (_nextActivity.DateTime.Date - DateTime.Now.Date).TotalDays;
        switch(daysTilNext)
        {
            case 0:
                return "Today";
            case 1:
                return "Tomorrow";
            default: 
                return $"{daysTilNext} days";
        }

    }
}
