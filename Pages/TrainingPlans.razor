@page "/TrainingPlans"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using PaceMe.BlazorApp.Services
@using PaceMe.BlazorApp.Model
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using PaceMe.BlazorApp.Utilities
@using Shared.Forms
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ITrainingPlanService _trainingPlanService

<h1>Training Plans</h1>

<PaceMe.BlazorApp.Shared.Forms.TrainingPlanEditForm @ref="editForm" OnEdit="HandleValidSubmit"></PaceMe.BlazorApp.Shared.Forms.TrainingPlanEditForm>
<button class='button' @onclick="() => editForm.Open()">Create New</button>

<hr/>
<h3>Training Plans</h3>
<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Active</th>
      <th>Actions</th>
    </tr>
  </thead>
  <Loading IsLoading="_loading">
    <tbody>
      @foreach(var plan in _trainingPlans){
      <tr>
          <td>@plan.Name</td>
          <td>@(plan.Active ? "Active" : "Inactive")</td>
          <td>
            <NavLink class="button" href='@("/trainingplan/" + plan.TrainingPlanId.ToString())'>Detail</NavLink>
            <button class="button button-outline" @onclick="@(e => DeleteTrainingPlan(plan))">Delete</button>
          </td>
      </tr>
      }
    </tbody>
  </Loading>
</table>
@code {
    private IReadOnlyList<TrainingPlan> _trainingPlans = new List<TrainingPlan>();
    private bool _loading = true;

    private TrainingPlanEditForm editForm = new TrainingPlanEditForm();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        await GetTrainingPlans(user);
    }

    private async Task HandleValidSubmit(TrainingPlan trainingPlan)
    {
        _loading = true;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        await _trainingPlanService.CreateTrainingPlan(user.GetMsalUserId(), trainingPlan);
        await GetTrainingPlans(user);

    }

    private async Task DeleteTrainingPlan(TrainingPlan plan)
    {
        _loading = true;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        await _trainingPlanService.DeleteTrainingPlan(user.GetMsalUserId(), plan.TrainingPlanId);
        await GetTrainingPlans(user);

    }

    private async Task GetTrainingPlans(ClaimsPrincipal user)
    {
        _trainingPlans = await _trainingPlanService.GetTrainingPlans(user.GetMsalUserId());
        _loading = false;
    }
}
