@page "/TrainingPlans"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using PaceMe.BlazorApp.Services
@using PaceMe.BlazorApp.Model
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using PaceMe.BlazorApp.Utilities
@using Shared.Forms
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ITrainingPlanService _trainingPlanService

<h1>Training Plans</h1>

<PaceMe.BlazorApp.Shared.Forms.TrainingPlanEditForm @ref="editForm" OnEdit="HandleValidSubmit"></PaceMe.BlazorApp.Shared.Forms.TrainingPlanEditForm>
<button class='button' @onclick="() => editForm.Open()">Create New</button>
<hr/>
<Loading IsLoading="_loading">
  <div class="flex-wrapper">
      @foreach(var plan in _trainingPlans){
        <div class='card @(plan.Active ? "active-plan" : "")'>
          <h4 style="margin-bottom: 0.5em">@plan.Name</h4>
          <NavLink class="button block-button" href='@("/trainingplan/" + plan.TrainingPlanId.ToString())'>Detail</NavLink>
        </div>
      }
  </div>
</Loading>
@code {
    private IReadOnlyList<TrainingPlan> _trainingPlans = new List<TrainingPlan>();
    private bool _loading = true;

    private TrainingPlanEditForm editForm = new TrainingPlanEditForm();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        await GetTrainingPlans(user);
    }

    private async Task HandleValidSubmit(TrainingPlan trainingPlan)
    {
        _loading = true;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        await _trainingPlanService.CreateTrainingPlan(user.GetMsalUserId(), trainingPlan);
        await GetTrainingPlans(user);

    }

    private async Task GetTrainingPlans(ClaimsPrincipal user)
    {
        _trainingPlans = await _trainingPlanService.GetTrainingPlans(user.GetMsalUserId());
        _loading = false;
    }
}
