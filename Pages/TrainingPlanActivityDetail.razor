@page "/TrainingPlan/{TrainingPlanId}/Activity/{TrainingPlanActivityId}"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using PaceMe.BlazorApp.Services
@using PaceMe.BlazorApp.Model
@using System
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using PaceMe.BlazorApp.Utilities
@using System.ComponentModel.DataAnnotations
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ITrainingPlanService _trainingPlanService
@inject ITrainingPlanActivityService _trainingPlanActivityService
@inject ITrainingPlanActivitySegmentService _trainingPlanActivitySegmentService
@inject NavigationManager NavigationManager

<h1>Activity: @trainingPlanActivityEditForm.Name</h1>
<NavLink class="button button-outline" href='@($"/trainingplan/{_trainingPlanId}")'>Back To Training Plan</NavLink>
<button class='button @(_displayEditor ? "button-outline" : "")' @onclick="@(e => _displayEditor = !_displayEditor)">Toggle Activity Editor</button>
<button class="button button-outline" @onclick="@(e => DeleteTrainingPlanActivity(trainingPlanActivityEditForm))">Delete</button>
@if(_displayEditor){

    <EditForm Model="@trainingPlanActivityEditForm" OnValidSubmit="@HandleEditValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <label>
            Activity Name:
            <InputText id="Name" @bind-Value="trainingPlanActivityEditForm.Name" />
        </label>
        <label>
            Completed:
            <InputCheckbox id="Completed" @bind-Value="trainingPlanActivityEditForm.Completed" />
        </label>
        <label>
            Date:
            <InputDate id="DateTime" @bind-Value="trainingPlanActivityEditForm.DateTime" />
        </label>

        <button class="button" type="submit">Update</button>
    </EditForm>
}
<hr/>
<h3>Create Segment</h3>
<EditForm Model="@segmentCreateForm" OnValidSubmit="@HandleCreateValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label>
        Notes:
        <InputText id="Notes" @bind-Value="segmentCreateForm.Notes" />

    </label>
    <label>
        Duration (Minutes):
        <InputNumber id="DurationSeconds" @bind-Value="Duration.Minutes" />
    </label>
    <label>
        Duration (Seconds):
        <InputNumber id="DurationSeconds" @bind-Value="Duration.Seconds" />
    </label>
    <button class="button" type="submit">Create</button>
</EditForm>
<hr/>
<table>
  <thead>
    <tr>
      <th>Notes</th>
      <th>Segment Duration</th>
      <th>Delete</th>
    </tr>
  </thead>
  <tbody>
    @foreach(var segment in _segments.OrderBy(x => x.Order)){
    <tr>
        <td>@segment.Notes</td>
        <td>@DisplayTime(segment.DurationSeconds)</td>
        <td><button class="button button-outline" @onclick="@(e => DeleteSegment(segment))">Delete</button></td>
    </tr>
    }
    <tr>
        <td>Total Duration:</td>
        <td>@DisplayTime(totalDuration)</td>
        <td></td>
    </tr>
  </tbody>
</table>

@code {

    [Parameter]
    public string TrainingPlanId { get; set; }
    [Parameter]
    public string TrainingPlanActivityId { get; set; }

    private Guid _trainingPlanId { get; set; }
    private Guid _trainingPlanActivityId { get; set; }

    private bool _displayEditor {get; set;} = false;

    private class SplitTime
    {

        [Range(0, Int32.MaxValue, ErrorMessage = "Minutes must be greater than 0.")]
        public int Minutes { get; set; } = 0;


        [Range(0, 60, ErrorMessage = "Seconds must be between 0 and 60.")]
        public int Seconds { get; set; } = 0;
    }

    private SplitTime Duration = new SplitTime();


    private int totalDuration { get {
            if(_segments.Any())
            {
                return _segments.Select(x => x.DurationSeconds).Sum();
            }
            return 0;
        }
    }

    private TrainingPlan trainingPlan = new TrainingPlan();    
    private TrainingPlanActivity trainingPlanActivityEditForm = new TrainingPlanActivity();
    private TrainingPlanActivitySegment segmentCreateForm = new TrainingPlanActivitySegment();

    private IEnumerable<TrainingPlanActivitySegment> _segments = new List<TrainingPlanActivitySegment>();

    private string DisplayTime(int seconds){
        return $"{(seconds / 60)}:{(seconds % 60):00}";
    }

    protected override async Task OnInitializedAsync()
    {
        _trainingPlanId = Guid.Parse(TrainingPlanId);
        _trainingPlanActivityId = Guid.Parse(TrainingPlanActivityId);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        trainingPlan = await _trainingPlanService.GetTrainingPlan(user.GetMsalUserId(), _trainingPlanId);
        trainingPlanActivityEditForm = await _trainingPlanActivityService.GetTrainingPlanActivity(user.GetMsalUserId(), _trainingPlanId, _trainingPlanActivityId);
        _segments = await _trainingPlanActivitySegmentService.GetTrainingPlanActivitySegments(user.GetMsalUserId(), _trainingPlanId, _trainingPlanActivityId);

    }
    

    private async Task HandleEditValidSubmit()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        await _trainingPlanActivityService.UpdateTrainingPlanActivity(user.GetMsalUserId(), _trainingPlanId, trainingPlanActivityEditForm);

    }

    private async Task HandleCreateValidSubmit()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if(_segments.Count() > 0){
            segmentCreateForm.Order = _segments.Select(x => x.Order).Max() + 1;
        }
        else {
            segmentCreateForm.Order = 1;
        }
        segmentCreateForm.DurationSeconds = Duration.Seconds + (Duration.Minutes * 60);
        await _trainingPlanActivitySegmentService.CreateTrainingPlanActivitySegment(user.GetMsalUserId(), _trainingPlanId, _trainingPlanActivityId, segmentCreateForm);
        _segments = await _trainingPlanActivitySegmentService.GetTrainingPlanActivitySegments(user.GetMsalUserId(), _trainingPlanId, _trainingPlanActivityId);
        segmentCreateForm = new TrainingPlanActivitySegment();
        Duration = new SplitTime();
    }

    private async Task DeleteSegment(TrainingPlanActivitySegment segment){

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        await _trainingPlanActivitySegmentService.DeleteTrainingPlanActivitySegment(user.GetMsalUserId(), _trainingPlanId, _trainingPlanActivityId, segment.TrainingPlanActivitySegmentId);
        _segments = await _trainingPlanActivitySegmentService.GetTrainingPlanActivitySegments(user.GetMsalUserId(), _trainingPlanId, _trainingPlanActivityId);
    }

    private async Task DeleteTrainingPlanActivity(TrainingPlanActivity activity){

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        await _trainingPlanActivityService.DeleteTrainingPlanActivity(user.GetMsalUserId(), activity.TrainingPlanId, activity.TrainingPlanActivityId);
        NavigationManager.NavigateTo("/trainingplan/" + _trainingPlanId.ToString(), false);
    }
}
