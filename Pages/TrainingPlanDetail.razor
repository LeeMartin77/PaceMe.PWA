@page "/TrainingPlan/{TrainingPlanId}"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using PaceMe.BlazorApp.Services
@using PaceMe.BlazorApp.Model
@using System
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using PaceMe.BlazorApp.Utilities
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ITrainingPlanService _trainingPlanService
@inject ITrainingPlanActivityService _trainingPlanActivityService


<Loading IsLoading="_loading">
    <h1>Training Plan: @trainingPlanEditForm.Name</h1>

    <NavLink class="button button-outline" href="/trainingplans">Back To Training Plans</NavLink>

    <button class='button @(_displayEditor ? "button-outline" : "")' @onclick=@(e => _displayEditor = !_displayEditor)>Edit Training Plan</button>
    @if(_displayEditor){
        <EditForm Model="@trainingPlanEditForm" OnValidSubmit="@HandleEditValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <label>
                Name:
                <InputText id="Name" @bind-Value="trainingPlanEditForm.Name" />
            </label>
            <label>
                Active:
                <InputCheckbox id="Active" @bind-Value="trainingPlanEditForm.Active" />
            </label>

            <button type="submit">Submit Edit</button>
        </EditForm>
    }
    <hr/>
    <h3>Activities</h3>
    <div class="activity-calendar-control">
        <button class="button" @onclick=@(e => viewingMonth = viewingMonth.AddMonths(-1))>
            @viewingMonth.AddMonths(-1).ToString("MMM")
        </button>
        <span>
            @viewingMonth.ToString("MMMM yyyy")
        </span>
        <button class="button" @onclick=@(e => viewingMonth = viewingMonth.AddMonths(1))>
            @viewingMonth.AddMonths(1).ToString("MMM")
        </button>
    </div>
    <div class="activity-calendar">
        <div class="activity-calendar-header">
            <div class="activity-calendar-header-cell">Mon</div>
            <div class="activity-calendar-header-cell">Tue</div>
            <div class="activity-calendar-header-cell">Wed</div>
            <div class="activity-calendar-header-cell">Thu</div>
            <div class="activity-calendar-header-cell">Fri</div>
            <div class="activity-calendar-header-cell">Sat</div>
            <div class="activity-calendar-header-cell">Sun</div>
        </div>
            <div class="activity-calendar-body">
                @foreach(var week in mondaysOfWeekInMonth){
                    <div class="activity-calendar-row">
                        @for(int i = 0; i < 7; i++){
                            <div class="activity-calendar-cell">
                                <label class='activity-calendar-day-label @(week.AddDays(i).Month != viewingMonth.Month ? "faded" : "")'>@week.AddDays(i).Day</label>
                                @foreach(var activity in ActivitiesOnDay(week.AddDays(i)))
                                {
                                    <a class='@(activity.Completed ? "calendar-activity completed-calendar-activity" : "calendar-activity")' href='@($"/trainingplan/{activity.TrainingPlanId}/activity/{activity.TrainingPlanActivityId}")'>@activity.Name</a>
                                }
                            </div>
                        }
                    </div>
                }
            </div>
    </div>
    <hr />

    <PaceMe.BlazorApp.Shared.Forms.ActivityEditForm @ref="EditForm" OnEdit="HandleCreateValidSubmit"></PaceMe.BlazorApp.Shared.Forms.ActivityEditForm>

    <button @onclick="() => EditForm.Open(DateTime.Now)">Add Activity</button>

</Loading>
@code {
    [Parameter]
    public string TrainingPlanId { get; set; }

    private Guid _trainingPlanId { get; set; }
    private bool _displayEditor {get; set;} = false;

    private bool _loading = true;

    private PaceMe.BlazorApp.Shared.Forms.ActivityEditForm EditForm { get; set; }

    private TrainingPlan trainingPlanEditForm = new TrainingPlan();
    private IEnumerable<TrainingPlanActivity> _trainingPlanActivities = new List<TrainingPlanActivity>();

    private DateTime viewingMonth;

    private IEnumerable<DateTime> mondaysOfWeekInMonth { get {
            var dateUnderCheck = viewingMonth;
            int month = viewingMonth.Month;
            while(dateUnderCheck.DayOfWeek != DayOfWeek.Monday){
                dateUnderCheck = dateUnderCheck.AddDays(-1);
            }
            var returnValue = new List<DateTime>();
            returnValue.Add(dateUnderCheck);
            dateUnderCheck = dateUnderCheck.AddDays(7);
            while(dateUnderCheck.Month == month){
                returnValue.Add(dateUnderCheck);
                dateUnderCheck = dateUnderCheck.AddDays(7);
            }
            return returnValue;
        }}

    protected override async Task OnInitializedAsync()
    {
        _trainingPlanId = Guid.Parse(TrainingPlanId);
        viewingMonth = DateTime.Now;
        viewingMonth = viewingMonth.AddDays(-viewingMonth.Day + 1);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        trainingPlanEditForm = await _trainingPlanService.GetTrainingPlan(user.GetMsalUserId(), _trainingPlanId);
        _trainingPlanActivities = await _trainingPlanActivityService.GetTrainingPlanActivities(user.GetMsalUserId(), _trainingPlanId);
        _loading = false;
    }

    private async Task HandleEditValidSubmit()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        await _trainingPlanService.UpdateTrainingPlan(user.GetMsalUserId(), trainingPlanEditForm);

    }

    private IEnumerable<TrainingPlanActivity> ActivitiesOnDay(DateTime day) {
        return _trainingPlanActivities.Where(x => x.DateTime.Date == day.Date);
    }

    private async Task HandleCreateValidSubmit(TrainingPlanActivity trainingPlanActivityCreateForm)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        await _trainingPlanActivityService.CreateTrainingPlanActivity(user.GetMsalUserId(), _trainingPlanId, trainingPlanActivityCreateForm);
        _trainingPlanActivities = await _trainingPlanActivityService.GetTrainingPlanActivities(user.GetMsalUserId(), _trainingPlanId);
    }
}
